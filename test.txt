USE [medcore]
GO
/****** Object:  StoredProcedure [finance].[usp_get_billing_qa_detail]    Script Date: 2/17/2023 3:39:04 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [finance].[usp_get_billing_qa_detail]
(@i_bgi_billing_id BIGINT)
AS
BEGIN
	SET NOCOUNT ON;

	/*--------------------------------- COMMENTS and NOTES --------------------------------------------------------------------------------------------------
	created by:  amy Race
	create date: 2022-06-16
	description: This stored procedure gets the qa data for mft to create the xlsx
	standards review date: 6/16/2022
	
	---------------------------------------------------------------------------------------------------------------------------------------------------------
	DEPENDENT OBJECTS
		
	SELECT ROW_NUMBER() OVER(ORDER BY referencing_id DESC) AS row
	,LOWER(ISNULL([sed].[referenced_server_name]+'.','') + ISNULL(referenced_database_name+'.','')+ referenced_schema_name +'.'+ referenced_entity_name) as object_referenced
	FROM sys.sql_expression_dependencies AS sed
	INNER JOIN sys.objects AS o 
	ON sed.referencing_id = o.object_id
	WHERE referencing_id = OBJECT_ID(N'finance.usp_get_billing_qa_detail');

	---------------------------------------------------------------------------------------------------------------------------------------------------------
	INPUTS
	@i_bgi_billing_id

	OUTPUTS
	Writes rows to ProcessLog table
	Returns data to MFT

	---------------------------------------------------------------------------------------------------------------------------------------------------------
	NOTES and
	Revisions: 
	/*
	Notes and Revisions:        
	Date        Name            Proj/Tkt    Description
	==========	============    =========== =================================================================================================================
	2022-06-16	Amy Race		PROJ-001222	New dev
	2022-07-23	Amy Race		PROJ-001222	Added coverage tier.  Using same logic in billing detail.  Need to verify in the member versioning in udf
	2022-08-10	Amy Race		PROJ-001222	1) Exclude "B" invoice members
											2) Add member name
											3) Added rollup name
	2022-08-19	Amy Race		PROJ-001222	Change billing dates to DATE only
	
	
	*/

	/*---------- TESTING VARIABLES ----------
	------------------------------------------
	EXEC [finance].[usp_get_billing_qa_detail] @i_bgi_billing_id = 1

	------------------------------------------	*/

	------------------ Process Log Parameters -----------------------------------
	-----------------------------------------------------------------------------*/
	DECLARE @l_v_database_name VARCHAR(50)
		  , @l_v_schema_name VARCHAR(50)
		  , @l_v_process VARCHAR(255)
		  , @l_v_object_name VARCHAR(255)
		  , @l_v_msg VARCHAR(8000)
		  , @l_v_data VARCHAR(8000)
		  , @l_v_event_status VARCHAR(25)
		  , @l_v_error_msg VARCHAR(3000)
		  , @c_i_return_fail INT;

	SET @l_v_process = 'Billing Exports';
	SET @l_v_object_name = ISNULL(OBJECT_NAME(@@PROCID), 'Unknown');
	SET @l_v_msg = 'Begin';
	SET @l_v_data = '';
	SET @c_i_return_fail = -1;
	SET @l_v_event_status = 'Begin';

	SELECT @l_v_database_name = DB_NAME();

	SET @l_v_schema_name = ISNULL(OBJECT_SCHEMA_NAME(@@PROCID), '.sql file');

	-- Log the Start Time:
	EXEC util.logs.usp_processlog @p_DatabaseName = @l_v_database_name
								, @p_SchemaName = @l_v_schema_name
								, @p_Process = @l_v_process
								, @p_ObjectName = @l_v_object_name
								, @p_Msg = @l_v_msg
								, @p_Data = @l_v_data
								, @p_EventStatus = @l_v_event_status;

	SET @l_v_msg = '';
	SET @l_v_event_status = '';

	--get internal 
	DECLARE @l_bgi_billing_id BIGINT;   
	DECLARE
        @l_bgi_billing_output_id                 BIGINT
       ,@l_v_sql                                 NVARCHAR(MAX)
       ,@l_v_category_list                       NVARCHAR(MAX)
       ,@l_v_category_list_formatted             NVARCHAR(MAX)
       ,@l_v_statistical_category_list           NVARCHAR(MAX)
       ,@l_v_statistical_category_list_formatted NVARCHAR(MAX)
       ,@l_v_json                                NVARCHAR(MAX)
       ,@l_v_with_columns                        NVARCHAR(MAX)
       ,@l_v_columns                             NVARCHAR(MAX)
       ,@l_v_total_columns                       NVARCHAR(MAX)
       ,@l_v_sql_json                            NVARCHAR(MAX);
	   

	SET @l_bgi_billing_id = @i_bgi_billing_id;

	BEGIN TRY
		BEGIN TRANSACTION;
		 SELECT
            @l_v_category_list = COALESCE (@l_v_category_list + ',', '') + N'[' + UPPER (bce.BILLING_CATEGORY_NAME)
                                 + N']'
           ,@l_v_category_list_formatted = COALESCE (@l_v_category_list_formatted + ',', '') + N'
				CASE WHEN ['               + UPPER (bce.BILLING_CATEGORY_NAME)
                                           + N'] IS NULL THEN CAST(''0.00'' AS NUMERIC(10,2))
				ELSE  CAST(['              + UPPER (bce.BILLING_CATEGORY_NAME) + N'] AS NUMERIC(10,2))
				END AS ['                  + UPPER (bce.BILLING_CATEGORY_NAME) + N']'
		FROM (
		SELECT --a.ACCOUNT_HCC_ID
			 --, a.ACCOUNT_NAME
			 --, asub.ACCOUNT_HCC_ID AS SUB_ACCOUNT_HCC_ID
			 --, asub.ACCOUNT_NAME AS SUB_ACCOUNT_NAME
			 --, b.BILL_FACT_KEY AS BILLING_ID
			 --, b.IS_VOID
			 --, b.BILL_STATUS_CODE
			 --,, ISNULL(fbc.rollup_summary_name, 'Not mapped-' + bc.BILLING_CATEGORY_NAME) ROLLUP_CATEGORY
			 DISTINCT TOP 100 PERCENT bc.BILLING_CATEGORY_NAME
			 --, CAST(sdt.DATE_VALUE AS DATE) BILLING_PERIOD_START
			 --, CAST(edt.DATE_VALUE AS DATE) BILLING_PERIOD_END
			 --, m.MEMBER_HCC_ID
			 --, m.MEMBER_FULL_NAME
			 --, me2.tier_name AS TIER_NAME
			 --, br.RATE_APPLIED
		FROM hrpdw.he.BILL_FACT b
			JOIN hrpdw.he.ALL_BILL_LINE_FACT bl
				ON b.BILL_FACT_KEY = bl.BILL_FACT_KEY
			JOIN hrpdw.he.BILLING_CATEGORY_CODE bc
				ON bl.BILLING_CATEGORY_KEY = bc.BILLING_CATEGORY_KEY
			JOIN hrpdw.he.ACCOUNT a
				ON a.ACCOUNT_KEY = b.ACCOUNT_KEY
			JOIN hrpdw.he.MEMBER m
				ON bl.MEMBER_KEY = m.MEMBER_KEY
			JOIN hrpdw.he.DATE_DIMENSION sdt
				ON bl.BILLED_PERIOD_START_DATE_KEY = sdt.DATE_KEY
			JOIN hrpdw.he.DATE_DIMENSION edt
				ON bl.BILLED_PERIOD_END_DATE_KEY = edt.DATE_KEY
			JOIN hrpdw.he.ACCOUNT asub
				ON asub.ACCOUNT_KEY = m.ACCOUNT_KEY
			JOIN hrpdw.he.BILLING_RATE br
				ON br.BILLING_RATE_KEY = bl.BILLING_RATE_KEY
			LEFT JOIN finance.billing_categories fbc
				ON bc.BILLING_CATEGORY_CODE = fbc.code
			OUTER APPLY
		(
			SELECT TOP(1)CASE
							 WHEN me.tier_name = 'Employee' THEN 'Sub'
							 ELSE me.tier_name
						 END AS tier_name
			FROM util.ref.tudf_member_eligibility(NULL, a.ACCOUNT_HCC_ID) me
			WHERE me.member_hcc_id = m.MEMBER_HCC_ID
				AND me.benefit_plan_start_date < edt.DATE_VALUE
				AND me.benefit_plan_end_date > sdt.DATE_VALUE
			ORDER BY me.medical DESC
				   , me.dental DESC
		) me2
		WHERE 1 = 1
			AND b.BILL_FACT_KEY = @l_bgi_billing_id
			AND m.MEMBER_HCC_ID NOT LIKE 'B%'
		) bce

		--SELECT a.ACCOUNT_HCC_ID
		--	 , a.ACCOUNT_NAME
		--	 , asub.ACCOUNT_HCC_ID AS SUB_ACCOUNT_HCC_ID
		--	 , asub.ACCOUNT_NAME AS SUB_ACCOUNT_NAME
		--	 , b.BILL_FACT_KEY AS BILLING_ID
		--	 , b.IS_VOID
		--	 , b.BILL_STATUS_CODE
		--	 , ISNULL(fbc.rollup_summary_name, 'Not mapped-' + bc.BILLING_CATEGORY_NAME) ROLLUP_CATEGORY
		--	 , bc.BILLING_CATEGORY_NAME
		--	 , CAST(sdt.DATE_VALUE AS DATE) BILLING_PERIOD_START
		--	 , CAST(edt.DATE_VALUE AS DATE) BILLING_PERIOD_END
		--	 , m.MEMBER_HCC_ID
		--	 , m.MEMBER_FULL_NAME
		--	 , me2.tier_name AS TIER_NAME
		--	 , br.RATE_APPLIED
		--FROM hrpdw.he.BILL_FACT b
		--	JOIN hrpdw.he.ALL_BILL_LINE_FACT bl
		--		ON b.BILL_FACT_KEY = bl.BILL_FACT_KEY
		--	JOIN hrpdw.he.BILLING_CATEGORY_CODE bc
		--		ON bl.BILLING_CATEGORY_KEY = bc.BILLING_CATEGORY_KEY
		--	JOIN hrpdw.he.ACCOUNT a
		--		ON a.ACCOUNT_KEY = b.ACCOUNT_KEY
		--	JOIN hrpdw.he.MEMBER m
		--		ON bl.MEMBER_KEY = m.MEMBER_KEY
		--	JOIN hrpdw.he.DATE_DIMENSION sdt
		--		ON bl.BILLED_PERIOD_START_DATE_KEY = sdt.DATE_KEY
		--	JOIN hrpdw.he.DATE_DIMENSION edt
		--		ON bl.BILLED_PERIOD_END_DATE_KEY = edt.DATE_KEY
		--	JOIN hrpdw.he.ACCOUNT asub
		--		ON asub.ACCOUNT_KEY = m.ACCOUNT_KEY
		--	JOIN hrpdw.he.BILLING_RATE br
		--		ON br.BILLING_RATE_KEY = bl.BILLING_RATE_KEY
		--	LEFT JOIN finance.billing_categories fbc
		--		ON bc.BILLING_CATEGORY_CODE = fbc.code
		--	OUTER APPLY
		--(
		--	SELECT TOP(1)CASE
		--					 WHEN me.tier_name = 'Employee' THEN 'Sub'
		--					 ELSE me.tier_name
		--				 END AS tier_name
		--	FROM util.ref.tudf_member_eligibility(NULL, a.ACCOUNT_HCC_ID) me
		--	WHERE me.member_hcc_id = m.MEMBER_HCC_ID
		--		AND me.benefit_plan_start_date < edt.DATE_VALUE
		--		AND me.benefit_plan_end_date > sdt.DATE_VALUE
		--	ORDER BY me.medical DESC
		--		   , me.dental DESC
		--) me2
		--WHERE 1 = 1
		--	AND b.BILL_FACT_KEY = @l_bgi_billing_id
		--	AND m.MEMBER_HCC_ID NOT LIKE 'B%';

		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		SET @l_v_event_status = 'FAIL';
		SET @l_v_error_msg = ' Line Number: ' + CAST(ERROR_LINE() AS VARCHAR) + ISNULL(ERROR_MESSAGE(), '');
		SET @l_v_msg = 'ERROR: ..Additional Info: ' + @l_v_error_msg;

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		EXEC util.logs.usp_processlog @p_DatabaseName = @l_v_database_name
									, @p_SchemaName = @l_v_schema_name
									, @p_Process = @l_v_process
									, @p_ObjectName = @l_v_object_name
									, @p_Msg = @l_v_msg
									, @p_Data = @l_v_data
									, @p_EventStatus = @l_v_event_status;

		THROW;

		RETURN @c_i_return_fail;
	END CATCH;

	-----------------------------------------------------------------------------*/
	------------------ Log the Successful Ending: -------------------------------
	-----------------------------------------------------------------------------
	SET @l_v_msg = 'End: ';
	SET @l_v_event_status = 'Passed ';

	EXEC util.logs.usp_processlog @p_DatabaseName = @l_v_database_name
								, @p_SchemaName = @l_v_schema_name
								, @p_Process = @l_v_process
								, @p_ObjectName = @l_v_object_name
								, @p_Msg = @l_v_msg
								, @p_Data = @l_v_data
								, @p_EventStatus = @l_v_event_status;

	-----------------------------------------------------------------------------*/
	RETURN 0;
END;
